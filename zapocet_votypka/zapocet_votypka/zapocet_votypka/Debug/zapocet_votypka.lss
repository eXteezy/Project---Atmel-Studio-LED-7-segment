
zapocet_votypka.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000290  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000809  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a6  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b5  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000325  00000000  00000000  00001a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_1>
   8:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	5b 00       	.word	0x005b	; ????
  56:	5e 00       	.word	0x005e	; ????
  58:	61 00       	.word	0x0061	; ????
  5a:	64 00       	.word	0x0064	; ????
  5c:	67 00       	.word	0x0067	; ????
  5e:	6a 00       	.word	0x006a	; ????
  60:	6d 00       	.word	0x006d	; ????
  62:	70 00       	.word	0x0070	; ????
  64:	73 00       	.word	0x0073	; ????
  66:	76 00       	.word	0x0076	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  9e:	0c 94 46 01 	jmp	0x28c	; 0x28c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <dekoder>:
	int temp; // pomocná promìnná
	// vytvoøení vzorù - už negované
	int vzory1[] = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90}; // 0-9
	
	// pøiøazení daného vzoru podle vstupního dekadického èísla do pomocné promìnné
	switch (cislo)
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	91 05       	cpc	r25, r1
  aa:	10 f5       	brcc	.+68     	; 0xf0 <dekoder+0x4a>
  ac:	fc 01       	movw	r30, r24
  ae:	e6 5d       	subi	r30, 0xD6	; 214
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	0c 94 2c 01 	jmp	0x258	; 0x258 <__tablejump2__>
	{
		case 0:
		temp = vzory1[0];
  b6:	20 ec       	ldi	r18, 0xC0	; 192
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	1a c0       	rjmp	.+52     	; 0xf0 <dekoder+0x4a>
		break;
		case 1:
		temp = vzory1[1];
  bc:	29 ef       	ldi	r18, 0xF9	; 249
  be:	30 e0       	ldi	r19, 0x00	; 0
		break;
  c0:	17 c0       	rjmp	.+46     	; 0xf0 <dekoder+0x4a>
		case 2:
		temp = vzory1[2];
  c2:	24 ea       	ldi	r18, 0xA4	; 164
  c4:	30 e0       	ldi	r19, 0x00	; 0
		break;
  c6:	14 c0       	rjmp	.+40     	; 0xf0 <dekoder+0x4a>
		case 3:
		temp = vzory1[3];
  c8:	20 eb       	ldi	r18, 0xB0	; 176
  ca:	30 e0       	ldi	r19, 0x00	; 0
		break;
  cc:	11 c0       	rjmp	.+34     	; 0xf0 <dekoder+0x4a>
		case 4:
		temp = vzory1[4];
  ce:	29 e9       	ldi	r18, 0x99	; 153
  d0:	30 e0       	ldi	r19, 0x00	; 0
		break;
  d2:	0e c0       	rjmp	.+28     	; 0xf0 <dekoder+0x4a>
		case 5:
		temp = vzory1[5];
  d4:	22 e9       	ldi	r18, 0x92	; 146
  d6:	30 e0       	ldi	r19, 0x00	; 0
		break;
  d8:	0b c0       	rjmp	.+22     	; 0xf0 <dekoder+0x4a>
		case 6:
		temp = vzory1[6];
  da:	22 e8       	ldi	r18, 0x82	; 130
  dc:	30 e0       	ldi	r19, 0x00	; 0
		break;
  de:	08 c0       	rjmp	.+16     	; 0xf0 <dekoder+0x4a>
		case 7:
		temp = vzory1[7];
  e0:	28 ef       	ldi	r18, 0xF8	; 248
  e2:	30 e0       	ldi	r19, 0x00	; 0
		break;
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <dekoder+0x4a>
		case 8:
		temp = vzory1[8];
  e6:	20 e8       	ldi	r18, 0x80	; 128
  e8:	30 e0       	ldi	r19, 0x00	; 0
		break;
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <dekoder+0x4a>
		case 9:
		temp = vzory1[9];
  ec:	20 e9       	ldi	r18, 0x90	; 144
  ee:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
	
	return temp;
}
  f0:	c9 01       	movw	r24, r18
  f2:	08 95       	ret

000000f4 <disp_jedno>:

// funkce pro zobrazení èíslice na daném segmentu
// - vypíše jedno èíslo
void disp_jedno(int cislo, int index)
{
	PORTC = ~(1 << (index-1)); // zapnutí daného segmentu -> abych vìdìl, které èíslo to je a chci ho vypisovat vlevo nebo vpravo
  f4:	61 50       	subi	r22, 0x01	; 1
  f6:	71 09       	sbc	r23, r1
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <disp_jedno+0xe>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <disp_jedno+0xa>
 106:	20 95       	com	r18
 108:	25 bb       	out	0x15, r18	; 21
	PORTA = dekoder(cislo); // èíslo se pošle do dekodéru pro daný zapnutý segment -> už negované
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <dekoder>
 10e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <disp_jedno+0x20>
 118:	00 c0       	rjmp	.+0      	; 0x11a <disp_jedno+0x26>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <disp_vsechny>:

// FUNKCE PRO 7-SEGMENT ------------------------------------------------------------------------------------------------------------------------------------------------------

// funkce pro vypsání celého èísla -> vypíše všechny èísla; postupnì zapisuje jednotlivé èíslice na dané segmenty
void disp_vsechny(int cislo[])
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	// výpis èíslic na jednotlivé displeje
	for (int i=0; i<2; i++)
	{
		disp_jedno(cislo[i], 2-i); // výpis jednoho èísla na jeden displej
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	88 81       	ld	r24, Y
 12a:	99 81       	ldd	r25, Y+1	; 0x01
 12c:	0e 94 7a 00 	call	0xf4	; 0xf4 <disp_jedno>
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	9b 81       	ldd	r25, Y+3	; 0x03
 138:	0e 94 7a 00 	call	0xf4	; 0xf4 <disp_jedno>
	}
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <main>:
volatile int tlacitko = 0;
volatile int podminka = 1;
// POZN.: když je promìnná tlacitko na 1 (IF v mainu), tak se èeká, než se TCNT1 naplní, což dìlá prodlevu -> nyní se již neèekáme na prodlevu a spustí se hned

int main(void)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <main+0x6>
 148:	00 d0       	rcall	.+0      	; 0x14a <main+0x8>
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	sei(); // inicializují se funkce interruptù
 14e:	78 94       	sei
	
	DDRA = 0xFF; DDRC = 0xFF; DDRD = 0x00; // inicializace portù na vstupní (DDRD) a výstupní (DDRA a DDRC)
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	8a bb       	out	0x1a, r24	; 26
 154:	84 bb       	out	0x14, r24	; 20
 156:	11 ba       	out	0x11, r1	; 17
	PORTA = 0xFF; PORTC = 0xFF; // port A a C se nastaví na 1
 158:	8b bb       	out	0x1b, r24	; 27
 15a:	85 bb       	out	0x15, r24	; 21
	
	// inicializace promìnných
	int i = 0; // inkrementaèní promìnná
	int array_cisla[2] = {0, 0}; // promìnná pro ukládání èíslic
 15c:	1a 82       	std	Y+2, r1	; 0x02
 15e:	19 82       	std	Y+1, r1	; 0x01
 160:	1c 82       	std	Y+4, r1	; 0x04
 162:	1b 82       	std	Y+3, r1	; 0x03
	
	// nastavení registrù externích interruptù
	MCUCR |= 0x0F; // vzestupná hrana (rising edge) -> pøíjde ètverec když se zmáèkne interrupt
 164:	85 b7       	in	r24, 0x35	; 53
 166:	8f 60       	ori	r24, 0x0F	; 15
 168:	85 bf       	out	0x35, r24	; 53
	GICR = 1 << INT0 | 1 << INT1; // povolení interruptù
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	8b bf       	out	0x3b, r24	; 59
	
	TCCR1B |= 1<<CS12; // nastavení èasovaèe - registr pro ovládání prescale -> // clkI/O/256 (From prescaler)
 16e:	8e b5       	in	r24, 0x2e	; 46
 170:	84 60       	ori	r24, 0x04	; 4
 172:	8e bd       	out	0x2e, r24	; 46
	
	DDRA = 0xFF; DDRC = 0xFF; DDRD = 0x00; // inicializace portù na vstupní (DDRD) a výstupní (DDRA a DDRC)
	PORTA = 0xFF; PORTC = 0xFF; // port A a C se nastaví na 1
	
	// inicializace promìnných
	int i = 0; // inkrementaèní promìnná
 174:	00 e0       	ldi	r16, 0x00	; 0
 176:	10 e0       	ldi	r17, 0x00	; 0
				
				// vytvoøení èíslic, které se vypíší na displayích
				// rozdìlání daného cisla, které má 2 cifry na 2 jednotlivá èísla
				// => èíslo si podìlím -> získám jednu cifru -> udìlám modulo -> získám druhou cifru
				// "i" je èíslo, které chci vypsat
				array_cisla[0] = i/10;
 178:	0f 2e       	mov	r0, r31
 17a:	fa e0       	ldi	r31, 0x0A	; 10
 17c:	ef 2e       	mov	r14, r31
 17e:	f1 2c       	mov	r15, r1
 180:	f0 2d       	mov	r31, r0
	TCCR1B |= 1<<CS12; // nastavení èasovaèe - registr pro ovládání prescale -> // clkI/O/256 (From prescaler)
	
	while (1)
	{
		// Èitaè/èasovaè -> øídí, kdy se naplní na 1 sekundu
		if(tlacitko == 1)
 182:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 186:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	01 f5       	brne	.+64     	; 0x1ce <main+0x8c>
		{
			if((TCNT1>31250)||(podminka==1)) // 31250 = 1 sekunda
 18e:	8c b5       	in	r24, 0x2c	; 44
 190:	9d b5       	in	r25, 0x2d	; 45
 192:	83 31       	cpi	r24, 0x13	; 19
 194:	9a 47       	sbci	r25, 0x7A	; 122
 196:	30 f4       	brcc	.+12     	; 0x1a4 <main+0x62>
 198:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 19c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	a9 f4       	brne	.+42     	; 0x1ce <main+0x8c>
			{
				TCNT1 = 0; // èasovaè je vynulován
 1a4:	1d bc       	out	0x2d, r1	; 45
 1a6:	1c bc       	out	0x2c, r1	; 44
				
				podminka = 0;
 1a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_start+0x1>
 1ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
				
				// vytvoøení èíslic, které se vypíší na displayích
				// rozdìlání daného cisla, které má 2 cifry na 2 jednotlivá èísla
				// => èíslo si podìlím -> získám jednu cifru -> udìlám modulo -> získám druhou cifru
				// "i" je èíslo, které chci vypsat
				array_cisla[0] = i/10;
 1b0:	c8 01       	movw	r24, r16
 1b2:	b7 01       	movw	r22, r14
 1b4:	0e 94 18 01 	call	0x230	; 0x230 <__divmodhi4>
 1b8:	7a 83       	std	Y+2, r23	; 0x02
 1ba:	69 83       	std	Y+1, r22	; 0x01
				array_cisla[1] = i%10;
 1bc:	9c 83       	std	Y+4, r25	; 0x04
 1be:	8b 83       	std	Y+3, r24	; 0x03
				
				i++; // inkrementace
 1c0:	0f 5f       	subi	r16, 0xFF	; 255
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255

				// vynulování, když dojede do 100 -> zabraòuje se pøeteèení inkrementované promìnné
				if (i == 100)
 1c4:	04 36       	cpi	r16, 0x64	; 100
 1c6:	11 05       	cpc	r17, r1
 1c8:	11 f4       	brne	.+4      	; 0x1ce <main+0x8c>
				i = 0;
 1ca:	00 e0       	ldi	r16, 0x00	; 0
 1cc:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		disp_vsechny(array_cisla); // výpíše èísla na displaye -> sem vstupuje array 2 cisel
 1ce:	ce 01       	movw	r24, r28
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	0e 94 8f 00 	call	0x11e	; 0x11e <disp_vsechny>
	}
 1d6:	d5 cf       	rjmp	.-86     	; 0x182 <main+0x40>

000001d8 <__vector_1>:

// INTERRUPRTY ------------------------------------------------------------------------------------------------------------------------------------------------------
// promìnná tlacitko v mainu (IF podmínka)
// START tlaèítko
ISR(INT0_vect)
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
	tlacitko = 1; // spustí inkrementaci
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 1ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
}
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_2>:

// STOP tlaèítko
ISR(INT1_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
	tlacitko = 0; // zastaví inkrementaci
 20e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 212:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	podminka = 1; // podmínka pro zmenšení prodlevy
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 21e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
}
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <__divmodhi4>:
 230:	97 fb       	bst	r25, 7
 232:	07 2e       	mov	r0, r23
 234:	16 f4       	brtc	.+4      	; 0x23a <__divmodhi4+0xa>
 236:	00 94       	com	r0
 238:	07 d0       	rcall	.+14     	; 0x248 <__divmodhi4_neg1>
 23a:	77 fd       	sbrc	r23, 7
 23c:	09 d0       	rcall	.+18     	; 0x250 <__divmodhi4_neg2>
 23e:	0e 94 32 01 	call	0x264	; 0x264 <__udivmodhi4>
 242:	07 fc       	sbrc	r0, 7
 244:	05 d0       	rcall	.+10     	; 0x250 <__divmodhi4_neg2>
 246:	3e f4       	brtc	.+14     	; 0x256 <__divmodhi4_exit>

00000248 <__divmodhi4_neg1>:
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	08 95       	ret

00000250 <__divmodhi4_neg2>:
 250:	70 95       	com	r23
 252:	61 95       	neg	r22
 254:	7f 4f       	sbci	r23, 0xFF	; 255

00000256 <__divmodhi4_exit>:
 256:	08 95       	ret

00000258 <__tablejump2__>:
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	05 90       	lpm	r0, Z+
 25e:	f4 91       	lpm	r31, Z
 260:	e0 2d       	mov	r30, r0
 262:	09 94       	ijmp

00000264 <__udivmodhi4>:
 264:	aa 1b       	sub	r26, r26
 266:	bb 1b       	sub	r27, r27
 268:	51 e1       	ldi	r21, 0x11	; 17
 26a:	07 c0       	rjmp	.+14     	; 0x27a <__udivmodhi4_ep>

0000026c <__udivmodhi4_loop>:
 26c:	aa 1f       	adc	r26, r26
 26e:	bb 1f       	adc	r27, r27
 270:	a6 17       	cp	r26, r22
 272:	b7 07       	cpc	r27, r23
 274:	10 f0       	brcs	.+4      	; 0x27a <__udivmodhi4_ep>
 276:	a6 1b       	sub	r26, r22
 278:	b7 0b       	sbc	r27, r23

0000027a <__udivmodhi4_ep>:
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	5a 95       	dec	r21
 280:	a9 f7       	brne	.-22     	; 0x26c <__udivmodhi4_loop>
 282:	80 95       	com	r24
 284:	90 95       	com	r25
 286:	bc 01       	movw	r22, r24
 288:	cd 01       	movw	r24, r26
 28a:	08 95       	ret

0000028c <_exit>:
 28c:	f8 94       	cli

0000028e <__stop_program>:
 28e:	ff cf       	rjmp	.-2      	; 0x28e <__stop_program>
